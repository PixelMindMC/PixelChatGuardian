#############################################################
#*---------------------------------------------------------*#
#|                     PixelChat Guardian                  |#
#*---------------------------------------------------------*#
#############################################################

# Configuration file for PixelChat Guardian.
# Generated for version ${version}
# Ensure to update this file when updating the plugin!

# For support or inquiries, please contact us via GitHub, Discord or Modrinth.

# Configuration version
version: ${version}

###################### General Settings #####################

# General settings for the plugin.
general:

  # Plugin language options: custom, de, en, es, fr, nl zh-cn or zh-tw. [Default: en]
  language: en

  # Enable or disable metrics collection. [Default: true]
  enable-metrics: true

  # Enable or disable update checking. [Default: true]
  check-for-updates: true

  # Plugin log level. Options: DEBUG, INFO, WARNING and ERROR. [Default: INFO]
  log-level: INFO


################## Plugin Support Settings ##################

# Enable or disable support for specific plugins. Set to true to enable support for a plugin.
plugin-support:

  # Enable support for CarbonChat integration. [Default: true]
  carbonchat: true # Tested with version 3.0.0-beta.32


###################### Module Settings ######################

# Toggle specific plugin modules on/off.
modules:

  # ChatGuard module. [Default: true]
  chatguard: true
  # Emoji replacement module. [Default: true]
  emojis: true
  # Color and format chat code replacement module. [Default: true]
  chat-codes: true


#################### AI and API Settings ####################

# AI and API related settings.
api:

  # API endpoint compliant with OpenAI's chat completion format. [Default: https://api.groq.com/openai/v1/chat/completions]
  endpoint: "https://api.groq.com/openai/v1/chat/completions"

  # AI model for chat moderation. Example: gpt-4o or llama-3.1-8b-instant. [Default: llama-3.3-70b-versatile]
  ai-model: "llama-3.3-70b-versatile"

  # API key for authentication with the endpoint.
  key: "API-KEY"

  # System prompt for automatic chat moderation.
  # Context: Analyze messages and respond in JSON with fields `block` (boolean) and `reason` (string).
  sys-prompt: >
    "You are an AI moderation assistant for a Minecraft server chat. Analyze each player message and respond only in JSON format with the following fields:
      "isOffensiveLanguage": boolean   // True if message contains offensive language, slurs, hate speech, severe insults, or real-world crime references.
      "isUsername": boolean            // True if message contains a username or player identifier.
      "isPassword": boolean,           // True if message appears to contain a password or login credentials.
      "isHomeAddress": boolean,        // True if message contains a real-world address or location.
      "isEmail": boolean               // True if message includes an email address.
      "isWebsite": boolean             // True if message contains a website link or URL.
      "isSexualContent": boolean       // True if message contains sexual content or innuendo, including adult or explicit references.
      "block": boolean                 // True if the message should be blocked.
      "reason": string                 // Reason for blocking if the message contains one or more of the above fields. Must be one or more of the following combinations, translated into the specified language:
        - "Offensive language"
        - "Hate speech or slur"
        - "Severe insult"
        - "Reference to real-world crimes"
        - "Sexual content"
        - "Sensitive personal information"
        - "Username or player identifier"
        - "Password or login credentials"
        - "Email address"
        - "Home address or location"
        - "Not allowed websites"
        - "Phishing or scam attempt"
        - "Inappropriate or adult content"
        - "Threatening or violent language"
        - "Other forms of harmful language"
      Blocking Rules:
        - Block offensive or harmful language (slurs, hate speech, etc.).
        - Block sensitive personal information (emails, addresses, usernames, passwords).
        - Block sexual content or explicit messages.
        - Block unauthorized websites.
        - Allow in-game-related talk, including playful phrases like “kill all the zombies.”
      Important:
        Respond with only the JSON object, no explanations or additional text."

##################### ChatGuard Settings ####################

# ChatGuard related settings.
chatguard:

  # Enable or disable the custom ChatGuard prefix. [Default: false]
  enable-custom-prefix: false
  # Define the custom ChatGuard prefix format when enabled. [Default: §8[§c§lPixel§9Chat§r§8]]
  custom-prefix: "§8[§c§lPixel§9lChat§r§8]"

  # Message handling strategy. Options: CENSOR, BLOCK. [Default: CENSOR]
  message-handling: CENSOR

  # Notify the user if their message is blocked. [Default: true]
  notify-user: true

  # ChatGuard rules for blocking offensive language and sensitive personal information.
  rules:

    # Blocks any form of offensive language, severe insults, hate speech, slurs, real-world crime references, or other forms of harmful language.
    blockOffensiveLanguage: true
    # Prevents users from sharing their usernames to safeguard their online identity.
    blockUsernames: true
    # Blocks users from sharing passwords, ensuring sensitive credentials are not exposed accidentally or maliciously.
    blockPasswords: true
    # Prevents users from sharing full or partial home addresses, safeguarding their physical location and privacy.
    blockHomeAddresses: true
    # Detects and blocks the sharing of email addresses to prevent phishing attempts or unwanted communications.
    blockEmailAddresses: true
    # Restricts users from sharing website URLs to avoid spreading malicious links or inappropriate content.
    blockWebsites: false
    # Blocks and form of sexual content or innuendo.
    blockSexualContent: true

  # Strike-System settings.
  strike-system:

    # Use the built-in strike system for managing player behavior. [Default: true]
    use-built-in-strike-system: true

    # Reset player strikes on server restart. [Default: true]
    clear-strikes-on-server-restart: true

    # Number of strikes before the player is kicked. [Default: 3]
    strikes-before-kick: 3
    # Command to kick a player after reaching the strike limit. [Default: /kick <player> <reason>]
    kick-command: "kick <player> <reason>"

    # Number of strikes before issuing a temporary ban. [Default: 5]
    strikes-before-temp-ban: 5
    # Command to temporarily ban a player (requires an external plugin). [Default: /kick <player> <reason>]
    temp-ban-command: "kick <player> <reason>"

    # Number of strikes before a permanent ban. [Default: 6]
    strikes-before-ban: 6
    # Command to permanently ban a player. [Default: /ban <player> <reason>]
    ban-command: "ban <player> <reason>"

    # Custom command for issuing a strike to a player (requires an external plugin). [Default: /strike <player> <reason>]
    custom-strike-command: "strike <player> <reason>"