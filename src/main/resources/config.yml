#############################################################
#*---------------------------------------------------------*#
#|                     PixelChat Guardian                  |#
#*---------------------------------------------------------*#
#############################################################

# Configuration file for PixelChat Guardian.
# Generated for version ${project.version}.
# Ensure to update this file when updating the plugin!

# For support or inquiries, please contact us via GitHub, Discord or Modrinth.

###################### General Settings #####################

# Configuration version
version: 1.1.0

# Plugin language options: custom, de, en, es, fr, nl zh-cn or zh-tw. [Default: en]
language: en

# Enable or disable metrics collection. [Default: true]
enable-metrics: true

# Enable or disable update checking. [Default: true]
check-for-updates: true

# Plugin log level. Options: DEBUG, INFO, WARNING and ERROR. [Default: INFO]
log-level: INFO

# Enable or disable support for specific plugins. Set to true to enable support for a plugin.
plugin-support:
  # Enable support for CarbonChat integration. [Default: true]
  carbonchat: true

###################### Module Settings ######################

# Toggle specific plugin modules on/off.
modules:
  # Chat guardian module. [Default: true]
  chatguard: true
  # Emoji replacement module. [Default: true]
  emojis: true
  # Color and format chat code replacement module. [Default: true]
  chat-codes: true

#################### AI and API Settings ####################

# API endpoint compliant with OpenAI's chat completion format. [Default: https://api.groq.com/openai/v1/chat/completions]
api-endpoint: "https://api.groq.com/openai/v1/chat/completions"

# AI model for chat moderation. Example: gpt-4o or llama-3.1-8b-instant. [Default: llama-3.1-70b-versatile]
ai-model: "llama-3.1-70b-versatile"

# API key for authentication with the endpoint.
api-key: "API-KEY"

# System prompt for automatic chat moderation.
# Context: Analyze messages and respond in JSON with fields `block` (boolean) and `reason` (string).
# Block offensive language, slurs, and crime-related references. Allow minor swears and normal gameplay discussions.
sys-prompt: >
  "You are an AI-powered moderation assistant for a Minecraft server chat. Your task is to analyze each player message for harmful or inappropriate content and respond in JSON format with the fields:
    block: A boolean value (true if the message should be blocked; false if it should not).
    isOffensiveLanguage: A boolean value(true if the message contains offensive language, severe insults, hate 
    speech, slurs, real-world crime references, or other forms of harmful language; false if not)
    isUsername: A boolean value (true if the message contains a username or player identifier; false if not).
    isPassword: A boolean value (true if the message appears to include a password or sensitive login information; false if not).
    isHomeAddress: A boolean value (true if the message contains a physical address or location; false if not).
    isEmail: A boolean value (true if the message includes an email address; false if not).
    isWebsite: A boolean value (true if the message contains a website link or URL; false if not).
    reason: A brief string explaining why the message was blocked translated in the given language, if block is true. Use precise 
    terms such as:
      "Offensive language"
      "Hate speech or slur"
      "Severe insult"
      "Reference to real-world crimes"
      "Other forms of harmful language"
      "Sensitive personal information"
      "Not allowed websites"
  Guidelines for Blocking Messages:
      Block messages containing offensive language, severe insults, hate speech, slurs, real-world crime references, or other forms of harmful language.
      Allow in-game related messages, including minor or playful language (e.g. "kill all the zombies").
      Only respond with block and reason fields in the JSON format, with no additional explanations."

##################### ChatGuard Settings ####################

# Enable or disable the custom ChatGuard prefix. [Default: false]
enable-custom-chatguard-prefix: false
# Define the custom ChatGuard prefix format when enabled. [Default: §8[§c§lPixe§9lChat§r§8]]
custom-chatguard-prefix: "§8[§c§lPixe§9lChat§r§8]"

# Message handling strategy. Options: CENSOR, BLOCK. [Default: CENSOR]
message-handling: CENSOR

# Notify the user if their message is blocked. [Default: true]
notify-user: true

# Use the built-in strike system for managing player behavior. [Default: true]
use-built-in-strike-system: true

# Reset player strikes on server restart. [Default: true]
clear-strikes-on-server-restart: true

# Custom command for issuing a strike to a player (requires an external plugin). [Default: /strike <player> <reason>]
custom-strike-command: "strike <player> <reason>"

# Number of strikes before the player is kicked. [Default: 3]
strikes-before-kick: 3
# Command to kick a player after reaching the strike limit. [Default: /kick <player> <reason>]
kick-command: "kick <player> <reason>"

# Number of strikes before issuing a temporary ban. [Default: 5]
strikes-before-temp-ban: 5
# Command to temporarily ban a player (requires an external plugin). [Default: /kick <player> <reason>]
temp-ban-command: "kick <player> <reason>"

# Number of strikes before a permanent ban. [Default: 6]
strikes-before-ban: 6
# Command to permanently ban a player. [Default: /ban <player> <reason>]
ban-command: "ban <player> <reason>"

####################### Emoji Settings ######################

# Custom emoji list that replaces ASCII characters with corresponding emojis.
emoji-list:
  "<3": "❤"
  ":)": "☺"
  ":(": "☹"
  "!!": "‼"
  ":airplane:": "✈"
  ":biohazard:": "☣"
  ":check:": "✔"
  ":copyright:": "©"
  ":female_sign:": "♀"
  ":frowning:": "☹"
  ":heart:": "❤"
  ":index_pointing_up:": "☝"
  ":male_sign:": "♂"
  ":radioactive:": "☢"
  ":registered:": "®"
  ":skull_crossbones:": "☠"
  ":smile:": "☺"
  ":trademark:": "™"
  ":v:": "✌"
  ":watch:": "⌚"
  ":writing_hand:": "✍"

#################### Chat codes Settings ####################

# Color and format chat codes list that replaces ASCII characters with corresponding color or format chat code.
chat-codes-list:
  "black": ":black:"
  "dark_blue": ":dark_blue:"
  "dark_green": ":dark_green:"
  "dark_aqua": ":dark_aqua:"
  "dark_red": ":dark_red:"
  "dark_purple": ":dark_purple:"
  "gold": ":gold:"
  "gray": ":gray:"
  "dark_gray": ":dark_gray:"
  "blue": ":blue:"
  "green": ":green:"
  "aqua": ":aqua:"
  "red": ":red:"
  "light_purple": ":light_purple:"
  "yellow": ":yellow:"
  "white": ":white:"

  "obfuscated": ":obfuscated:"
  "bold": ":bold:"
  "strikethrough": ":strikethrough:"
  "underline": ":underline:"
  "italic": ":italic:"
  "reset": ":reset:"